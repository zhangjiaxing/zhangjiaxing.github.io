<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>cat ~/.zhiliao.history - storage</title><link href="/" rel="alternate"></link><link href="/feeds/feeds/storage.atom.xml" rel="self"></link><id>/</id><updated>2023-08-08T01:07:58+08:00</updated><subtitle>无聊就该多读书。</subtitle><entry><title>rsync基本使用方法</title><link href="/posts/2023/07/31/rsync.html" rel="alternate"></link><published>2023-07-31T01:29:08+08:00</published><updated>2023-08-08T01:07:58+08:00</updated><author><name>zhiliao</name></author><id>tag:None,2023-07-31:/posts/2023/07/31/rsync.html</id><summary type="html">&lt;h2&gt;rsync介绍&lt;/h2&gt;
&lt;p&gt;rsync是快速和通用的远程和本地文件同步工具。&lt;/p&gt;
&lt;p&gt;支持通过远程shell或者rsnyc守护进程进行同步。经常用作备份和镜像的 …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;rsync介绍&lt;/h2&gt;
&lt;p&gt;rsync是快速和通用的远程和本地文件同步工具。&lt;/p&gt;
&lt;p&gt;支持通过远程shell或者rsnyc守护进程进行同步。经常用作备份和镜像的工具。&lt;strong&gt;使用远程shell同步时，rsync必须同时安装在源机器和目标机器上。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;rsync 默认使用文件大小和修改时间决定文件是否需要更新。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;支持拷贝连接，设备，所有者，组和权限。支持排除指定的文件进行同步。 支持匿名也支持身份认证的文件同步。&lt;/p&gt;
&lt;p&gt;rsnyc支持本地和远程之间同步，也支持本地不同目录同步。&lt;/p&gt;
&lt;h2&gt;rsync用法&lt;/h2&gt;
&lt;p&gt;一个冒号的是ssh协议
两个冒号或rsync://开头是rsync协议，两者等价&lt;/p&gt;
&lt;h3&gt;本地&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;rsync [OPTION...] SRC... [DEST]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;远程push&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;rsync [OPTION...] [USER@]HOST:SRC... [DEST]&lt;/li&gt;
&lt;li&gt;rsync [OPTION...] [USER@]HOST::SRC... [DEST]&lt;/li&gt;
&lt;li&gt;sync [OPTION...] rsync://[USER@]HOST[:PORT]/SRC... [DEST]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;远程pull&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;rsync [OPTION...] SRC... [USER@]HOST:DEST&lt;/li&gt;
&lt;li&gt;rsync [OPTION...] SRC... [USER@]HOST::DEST&lt;/li&gt;
&lt;li&gt;rsync [OPTION...] SRC... rsync://[USER@]HOST[:PORT]/DEST&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;常见用法&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;rsync -av  --delete root@git.local:/root/repo/  ~/workspace/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;理解SRC结尾的/， 如果不带/， 则把repo目录放到workspace下面，如果带上/则吧repo目录里面的文件同步到workspace下。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;rsync -rtNlHv  --progress --delete --block-size=8192  rsync://cdimage.debian.org/debian-cd/   ~/debian-cd/
同步debian-cd源，-rtNlHv  --progress --delete --block-size=8192 参数依次分别是：递归，同步（mtime），同步创建时间（birth），保留软连接，保留硬连接，输出细节，显示进度，在目标中删除源中没有的文件。 --block-size=8192是为了优化性能。&lt;/p&gt;
&lt;p&gt;其实也可以简写为&lt;code&gt;rsync -aNHlv  --progress --delete rsync://cdimage.debian.org/debian-cd/   ~/debian-cd/&lt;/code&gt; # 这样会多同步文件属主属组等。（看手册是这样，没验证）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;常用参数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;-r 表示递归，即包含子目录。注意，同步目录递归是必须的。&lt;/li&gt;
&lt;li&gt;−t  这个命令告诉rsync将修改时间与文件一起传输。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-a参数可以替代-r，除了可以递归同步以外，还可以同步元信息（比如修改时间、权限等），支持设备文件，保留符号连接。由于 rsync 默认使用文件大小和修改时间决定文件是否需要更新，所以-a比-r更有用。-a是常见用法。&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;-a 相当于 -rlptgoD，分别代表递归，使用软连接同步软连接，同步权限，同步修改时间，同步文件群组， 同步文件属主，同步设备文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-c、--checksum参数改变rsync的校验方式。默认情况下，rsync 只检查文件的大小和最后修改日期是否发生变化，如果发生变化，就重新传输；使用这个参数以后，则通过判断文件内容的校验和，决定是否重新传输。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--delete参数删除只存在于目标目录、不存在于源目标的文件，即保证目标目录是源目标的镜像。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;−−crtimes, −N, 将目标文件的创建时间设置为与源文件相同的值。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;--exclude参数指定排除不进行同步的文件，比如--exclude="*.iso"。&lt;/li&gt;
&lt;li&gt;--exclude-from参数指定一个本地文件，里面是需要排除的文件模式，每个模式一行。&lt;/li&gt;
&lt;li&gt;--existing、--ignore-non-existing参数表示不同步目标目录中不存在的文件和目录。&lt;/li&gt;
&lt;li&gt;-h参数表示以人类可读的格式输出。&lt;/li&gt;
&lt;li&gt;--hard-links, -H 保留硬连接。&lt;/li&gt;
&lt;li&gt;--links, -l 保留符号链接&lt;/li&gt;
&lt;li&gt;--ignore-existing参数表示只要该文件在目标目录中已经存在，就跳过去，不再同步这些文件。&lt;/li&gt;
&lt;li&gt;--include参数指定同步时要包括的文件，一般与--exclude结合使用。&lt;/li&gt;
&lt;li&gt;--link-dest参数指定增量备份的基准目录。&lt;/li&gt;
&lt;li&gt;-m参数指定不同步空目录。&lt;/li&gt;
&lt;li&gt;-n参数或--dry-run参数模拟将要执行的操作，而并不真的执行。配合-v参数使用，可以看到哪些内容会被同步过去。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--progress参数表示显示进展。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;--remove-source-files参数表示传输成功后，删除发送方的文件。&lt;/li&gt;
&lt;li&gt;--size-only参数表示只同步大小有变化的文件，不考虑文件修改时间的差异。&lt;/li&gt;
&lt;li&gt;-v参数表示输出细节。-vv表示输出更详细的信息，-vvv表示输出最详细的信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-z参数指定同步时压缩数据。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;防止误删文件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-u、--update参数表示同步时跳过目标目录中修改时间更新的文件，即不同步这些有更新的时间戳的文件。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;-b、--backup参数指定在删除或更新目标目录已经存在的文件时，将该文件更名后进行备份，默认行为是删除。更名规则是添加由--suffix参数指定的文件后缀名，默认是~。&lt;/li&gt;
&lt;li&gt;--backup-dir参数指定文件备份时存放的目录，比如--backup-dir=/path/to/backups。&lt;/li&gt;
&lt;li&gt;--ignore-existing参数表示只要该文件在目标目录中已经存在，就跳过去，不再同步这些文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;继续传输&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;--append参数指定文件接着上次中断的地方，继续传输。&lt;/li&gt;
&lt;li&gt;--append-verify参数跟--append参数类似，但会对传输完成后的文件进行一次校验。如果校验失败，将重新发送整个文件。&lt;/li&gt;
&lt;li&gt;-P参数是--progress和--partial这两个参数的结合。&lt;/li&gt;
&lt;li&gt;---partial参数允许恢复中断的传输。不使用该参数时，rsync会删除传输到一半被打断的文件；使用该参数后，传输到一半的文件也会同步到目标目录，下次同步时再恢复中断的传输。一般需要与--append或--append-verify配合使用。&lt;/li&gt;
&lt;li&gt;--partial-dir参数指定将传输到一半的文件保存到一个临时目录，比如--partial-dir=.rsync-partial。一般需要与--append或--append-verify配合使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;增量备份&lt;/h2&gt;
&lt;p&gt;rsync 的最大特点就是它可以完成增量备份，也就是默认只复制有变动的文件。&lt;/p&gt;
&lt;p&gt;除了源目录与目标目录直接比较，rsync 还支持使用基准目录，即将源目录与基准目录之间变动的部分，同步到目标目录。&lt;/p&gt;
&lt;p&gt;具体做法是，第一次同步是全量备份，所有文件在基准目录里面同步一份。以后每一次同步都是增量备份，只同步源目录与基准目录之间有变动的部分，将这部分保存在一个新的目标目录。这个新的目标目录之中，也是包含所有文件，但实际上，只有那些变动过的文件是存在于该目录，其他没有变动的文件都是指向基准目录文件的硬链接。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--link-dest参数用来指定同步时的基准目录。&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ rsync -a --delete --link-dest /compare/path /source/path /target/path&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面命令中，--link-dest参数指定基准目录/compare/path，然后源目录/source/path跟基准目录进行比较，找出变动的文件，将它们拷贝到目标目录/target/path。那些没变动的文件则会生成硬链接。这个命令的第一次备份时是全量备份，后面就都是增量备份了。&lt;/p&gt;</content><category term="storage"></category><category term="storage"></category><category term="linux"></category></entry><entry><title>文件同步工具对比</title><link href="/posts/2023/07/30/file-sync-tools-compare.html" rel="alternate"></link><published>2023-07-30T23:04:24+08:00</published><updated>2023-07-31T01:28:31+08:00</updated><author><name>zhiliao</name></author><id>tag:None,2023-07-30:/posts/2023/07/30/file-sync-tools-compare.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;FreeFileSync # 操作非常简单，图形化界面方式使用，支持Windows, Linux，Mac， 支持sftp,ftp协议&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Syncthing # 支持多客户端一起同步，p2p，支持大多数操作系统，支持 …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;FreeFileSync # 操作非常简单，图形化界面方式使用，支持Windows, Linux，Mac， 支持sftp,ftp协议&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Syncthing # 支持多客户端一起同步，p2p，支持大多数操作系统，支持Android。通过web操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rsync # 命令行操作, 支持同步远程和本地，支持rsync协议和ssh协议，功能丰富。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="storage"></category><category term="storage"></category><category term="linux"></category></entry></feed>